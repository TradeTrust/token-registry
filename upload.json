{
  "language": "Solidity",
  "sources": {
    "contracts/base/RegistryAccess.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\";\nimport \"../interfaces/RegistryAccessErrors.sol\";\n\n/**\n * @title RegistryAccess\n * @dev Abstract contract handling access for the registry.\n */\nabstract contract RegistryAccess is AccessControlUpgradeable, RegistryAccessErrors {\n  bytes32 public constant MINTER_ROLE = keccak256(\"MINTER_ROLE\");\n  bytes32 public constant RESTORER_ROLE = keccak256(\"RESTORER_ROLE\");\n  bytes32 public constant ACCEPTER_ROLE = keccak256(\"ACCEPTER_ROLE\");\n\n  /**\n   * @notice Initialises the contract by setting up roles for the given admin address.\n   * @param admin The address of the admin role.\n   */\n  function __RegistryAccess_init(address admin) internal onlyInitializing {\n    if (admin == address(0)) {\n      revert InvalidAdminAddress();\n    }\n    _setupRole(DEFAULT_ADMIN_ROLE, admin);\n    _setupRole(MINTER_ROLE, admin);\n    _setupRole(RESTORER_ROLE, admin);\n    _setupRole(ACCEPTER_ROLE, admin);\n  }\n\n  /**\n   * @inheritdoc AccessControlUpgradeable\n   */\n  function supportsInterface(bytes4 interfaceId) public view virtual override(AccessControlUpgradeable) returns (bool) {\n    return super.supportsInterface(interfaceId);\n  }\n\n  /**\n   * @notice Sets the admin role to a new address.\n   */\n  function setRoleAdmin(bytes32 role, bytes32 adminRole) public virtual onlyRole(DEFAULT_ADMIN_ROLE) {\n    _setRoleAdmin(role, adminRole);\n  }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (access/AccessControl.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IAccessControlUpgradeable.sol\";\nimport \"../utils/ContextUpgradeable.sol\";\nimport \"../utils/StringsUpgradeable.sol\";\nimport \"../utils/introspection/ERC165Upgradeable.sol\";\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module that allows children to implement role-based access\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\n * members except through off-chain means by accessing the contract event logs. Some\n * applications may benefit from on-chain enumerability, for those cases see\n * {AccessControlEnumerable}.\n *\n * Roles are referred to by their `bytes32` identifier. These should be exposed\n * in the external API and be unique. The best way to achieve this is by\n * using `public constant` hash digests:\n *\n * ```\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n * ```\n *\n * Roles can be used to represent a set of permissions. To restrict access to a\n * function call, use {hasRole}:\n *\n * ```\n * function foo() public {\n *     require(hasRole(MY_ROLE, msg.sender));\n *     ...\n * }\n * ```\n *\n * Roles can be granted and revoked dynamically via the {grantRole} and\n * {revokeRole} functions. Each role has an associated admin role, and only\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n *\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n * that only accounts with this role will be able to grant or revoke other\n * roles. More complex role relationships can be created by using\n * {_setRoleAdmin}.\n *\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n * grant and revoke this role. Extra precautions should be taken to secure\n * accounts that have been granted it.\n */\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\n    function __AccessControl_init() internal onlyInitializing {\n    }\n\n    function __AccessControl_init_unchained() internal onlyInitializing {\n    }\n    struct RoleData {\n        mapping(address => bool) members;\n        bytes32 adminRole;\n    }\n\n    mapping(bytes32 => RoleData) private _roles;\n\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n\n    /**\n     * @dev Modifier that checks that an account has a specific role. Reverts\n     * with a standardized message including the required role.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     *\n     * _Available since v4.1._\n     */\n    modifier onlyRole(bytes32 role) {\n        _checkRole(role, _msgSender());\n        _;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\n        return _roles[role].members[account];\n    }\n\n    /**\n     * @dev Revert with a standard message if `account` is missing `role`.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     */\n    function _checkRole(bytes32 role, address account) internal view virtual {\n        if (!hasRole(role, account)) {\n            revert(\n                string(\n                    abi.encodePacked(\n                        \"AccessControl: account \",\n                        StringsUpgradeable.toHexString(uint160(account), 20),\n                        \" is missing role \",\n                        StringsUpgradeable.toHexString(uint256(role), 32)\n                    )\n                )\n            );\n        }\n    }\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\n        return _roles[role].adminRole;\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) public virtual override {\n        require(account == _msgSender(), \"AccessControl: can only renounce roles for self\");\n\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event. Note that unlike {grantRole}, this function doesn't perform any\n     * checks on the calling account.\n     *\n     * [WARNING]\n     * ====\n     * This function should only be called from the constructor when setting\n     * up the initial roles for the system.\n     *\n     * Using this function in any other way is effectively circumventing the admin\n     * system imposed by {AccessControl}.\n     * ====\n     *\n     * NOTE: This function is deprecated in favor of {_grantRole}.\n     */\n    function _setupRole(bytes32 role, address account) internal virtual {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Sets `adminRole` as ``role``'s admin role.\n     *\n     * Emits a {RoleAdminChanged} event.\n     */\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n        bytes32 previousAdminRole = getRoleAdmin(role);\n        _roles[role].adminRole = adminRole;\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * Internal function without access restriction.\n     */\n    function _grantRole(bytes32 role, address account) internal virtual {\n        if (!hasRole(role, account)) {\n            _roles[role].members[account] = true;\n            emit RoleGranted(role, account, _msgSender());\n        }\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * Internal function without access restriction.\n     */\n    function _revokeRole(bytes32 role, address account) internal virtual {\n        if (hasRole(role, account)) {\n            _roles[role].members[account] = false;\n            emit RoleRevoked(role, account, _msgSender());\n        }\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"
    },
    "contracts/interfaces/RegistryAccessErrors.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\npragma solidity ^0.8.0;\n\ninterface RegistryAccessErrors {\n  error InvalidAdminAddress();\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev External interface of AccessControl declared to support ERC165 detection.\n */\ninterface IAccessControlUpgradeable {\n    /**\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n     *\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n     * {RoleAdminChanged} not being emitted signaling this.\n     *\n     * _Available since v3.1._\n     */\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\n\n    /**\n     * @dev Emitted when `account` is granted `role`.\n     *\n     * `sender` is the account that originated the contract call, an admin role\n     * bearer except when using {AccessControl-_setupRole}.\n     */\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Emitted when `account` is revoked `role`.\n     *\n     * `sender` is the account that originated the contract call:\n     *   - if using `revokeRole`, it is the admin role bearer\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n     */\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) external view returns (bool);\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) external;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal onlyInitializing {\n    }\n\n    function __Context_init_unchained() internal onlyInitializing {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary StringsUpgradeable {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165Upgradeable.sol\";\nimport \"../../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\n    function __ERC165_init() internal onlyInitializing {\n    }\n\n    function __ERC165_init_unchained() internal onlyInitializing {\n    }\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/Initializable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/AddressUpgradeable.sol\";\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() initializer {}\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     */\n    bool private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Modifier to protect an initializer function from being invoked twice.\n     */\n    modifier initializer() {\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\n        // contract may have been reentered.\n        require(_initializing ? _isConstructor() : !_initialized, \"Initializable: contract is already initialized\");\n\n        bool isTopLevelCall = !_initializing;\n        if (isTopLevelCall) {\n            _initializing = true;\n            _initialized = true;\n        }\n\n        _;\n\n        if (isTopLevelCall) {\n            _initializing = false;\n        }\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} modifier, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        require(_initializing, \"Initializable: contract is not initializing\");\n        _;\n    }\n\n    function _isConstructor() private view returns (bool) {\n        return !AddressUpgradeable.isContract(address(this));\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary AddressUpgradeable {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165Upgradeable {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "contracts/base/TradeTrustTokenBaseURI.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\npragma solidity ^0.8.0;\n\nimport \"./TradeTrustSBT.sol\";\nimport \"./RegistryAccess.sol\";\n\n/**\n * @title TradeTrustTokenBaseURI\n * @dev This contract defines the base URI for the TradeTrustToken.\n */\nabstract contract TradeTrustTokenBaseURI is TradeTrustSBT, RegistryAccess {\n  /**\n   * @dev Internal variable to store the base URI.\n   */\n  string private _baseStorageURI;\n\n  /**\n   * @dev See {ERC165Upgradeable-supportsInterface}.\n   * @inheritdoc TradeTrustSBT\n   */\n  function supportsInterface(\n    bytes4 interfaceId\n  ) public view virtual override(TradeTrustSBT, RegistryAccess) returns (bool) {\n    return super.supportsInterface(interfaceId);\n  }\n\n  /**\n   * @dev Set the base URI.\n   * @param baseURI The base URI to set.\n   */\n  function setBaseURI(string memory baseURI) external onlyRole(DEFAULT_ADMIN_ROLE) {\n    _setBaseURI(baseURI);\n  }\n\n  function _setBaseURI(string memory baseURI) internal virtual {\n    _baseStorageURI = baseURI;\n  }\n\n  /**\n   * @dev See {SBTUpgradeable-_baseURI}.\n   */\n  function _baseURI() internal view virtual override returns (string memory) {\n    return _baseStorageURI;\n  }\n}\n"
    },
    "contracts/base/TradeTrustSBT.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\";\nimport \"./SBTUpgradeable.sol\";\nimport \"../interfaces/ITitleEscrow.sol\";\nimport \"../interfaces/ITitleEscrowFactory.sol\";\nimport \"../interfaces/TradeTrustTokenErrors.sol\";\nimport \"../interfaces/ITradeTrustSBT.sol\";\n\n/**\n * @title TradeTrustSBT\n */\nabstract contract TradeTrustSBT is SBTUpgradeable, PausableUpgradeable, TradeTrustTokenErrors, ITradeTrustSBT {\n  /**\n   * @dev Modifier to check if the bytes length is within the limit\n   */\n  modifier remarkLengthLimit(bytes calldata _remark) {\n    if (_remark.length > 120) revert RemarkLengthExceeded();\n    _;\n  }\n  /**\n   * @dev Initialise the contract.\n   * @param name The name of the token.\n   * @param symbol The symbol of the token.\n   */\n  function __TradeTrustSBT_init(string memory name, string memory symbol) internal onlyInitializing {\n    __SBT_init(name, symbol);\n    __Pausable_init();\n  }\n\n  /**\n   * @dev See {ERC165Upgradeable-supportsInterface}.\n   */\n  function supportsInterface(\n    bytes4 interfaceId\n  ) public view virtual override(SBTUpgradeable, IERC165Upgradeable) returns (bool) {\n    return interfaceId == type(ITradeTrustSBT).interfaceId || SBTUpgradeable.supportsInterface(interfaceId);\n  }\n\n  /**\n   * @dev See {IERC721ReceiverUpgradeable-onERC721Received}.\n   */\n  function onERC721Received(\n    address /* _operator */,\n    address /* _from */,\n    uint256 /* _tokenId */,\n    bytes memory /* _data */\n  ) public pure override returns (bytes4) {\n    return IERC721Receiver.onERC721Received.selector;\n  }\n\n  /**\n   * @dev Transfer a token to the registry.\n   * @param to The address of the registry.\n   * @param tokenId The ID of the token to transfer.\n   */\n  function _registryTransferTo(address to, uint256 tokenId, bytes memory _remark) internal {\n    this.transferFrom(address(this), to, tokenId, _remark);\n  }\n\n  /**\n   * @dev See {SBTUpgradeable-_beforeTokenTransfer}.\n   */\n  function _beforeTokenTransfer(address from, address to, uint256 tokenId) internal virtual override whenNotPaused {\n    super._beforeTokenTransfer(from, to, tokenId);\n  }\n\n  /**\n   * @dev See {ITradeTrustSBT-genesis}.\n   */\n  function genesis() public view virtual override returns (uint256);\n\n  /**\n   * @dev See {ITradeTrustSBT-titleEscrowFactory}.\n   */\n  function titleEscrowFactory() public view virtual override returns (ITitleEscrowFactory);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/ContextUpgradeable.sol\";\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    bool private _paused;\n\n    /**\n     * @dev Initializes the contract in unpaused state.\n     */\n    function __Pausable_init() internal onlyInitializing {\n        __Pausable_init_unchained();\n    }\n\n    function __Pausable_init_unchained() internal onlyInitializing {\n        _paused = false;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view virtual returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenNotPaused() {\n        require(!paused(), \"Pausable: paused\");\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    modifier whenPaused() {\n        require(paused(), \"Pausable: not paused\");\n        _;\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause() internal virtual whenNotPaused {\n        _paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function _unpause() internal virtual whenPaused {\n        _paused = false;\n        emit Unpaused(_msgSender());\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"
    },
    "contracts/base/SBTUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/ERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721ReceiverUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\n\nimport \"../interfaces/ISBTUpgradeable.sol\";\nimport \"../interfaces/IERC721MetadataUpgradeable.sol\";\n\n/**\n * @dev A trimmed version of the https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token\n * in OpenZeppelin for use as Soulbound Token.\n */\ncontract SBTUpgradeable is\n  Initializable,\n  ContextUpgradeable,\n  ERC165Upgradeable,\n  ISBTUpgradeable,\n  IERC721MetadataUpgradeable\n{\n  using AddressUpgradeable for address;\n  using StringsUpgradeable for uint256;\n\n  // Token name\n  string private _name;\n\n  // Token symbol\n  string private _symbol;\n\n  // Last Transaction Remark\n  bytes public remark;\n\n  // Mapping from token ID to owner address\n  mapping(uint256 => address) private _owners;\n\n  // Mapping owner address to token count\n  mapping(address => uint256) private _balances;\n\n  /**\n   * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\n   */\n  function __SBT_init(string memory name_, string memory symbol_) internal onlyInitializing {\n    __SBT_init_unchained(name_, symbol_);\n  }\n\n  function __SBT_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\n    _name = name_;\n    _symbol = symbol_;\n  }\n\n  /**\n   * @dev See {ERC165Upgradeable-supportsInterface}.\n   */\n  function supportsInterface(\n    bytes4 interfaceId\n  ) public view virtual override(ERC165Upgradeable, IERC165Upgradeable) returns (bool) {\n    return\n      interfaceId == type(ISBTUpgradeable).interfaceId ||\n      interfaceId == type(IERC721MetadataUpgradeable).interfaceId ||\n      super.supportsInterface(interfaceId);\n  }\n\n  /**\n   * @dev See {IERC721-balanceOf}.\n   */\n  function balanceOf(address owner) public view virtual override returns (uint256) {\n    require(owner != address(0), \"ERC721: balance query for the zero address\");\n    return _balances[owner];\n  }\n\n  /**\n   * @dev See {IERC721-ownerOf}.\n   */\n  function ownerOf(uint256 tokenId) public view virtual override returns (address) {\n    address owner = _owners[tokenId];\n    require(owner != address(0), \"ERC721: owner query for nonexistent token\");\n    return owner;\n  }\n\n  /**\n   * @dev See {IERC721Metadata-name}.\n   */\n  function name() public view virtual override returns (string memory) {\n    return _name;\n  }\n\n  /**\n   * @dev See {IERC721Metadata-symbol}.\n   */\n  function symbol() public view virtual override returns (string memory) {\n    return _symbol;\n  }\n\n  /**\n   * @dev See {IERC721Metadata-tokenURI}.\n   */\n  function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\n    require(_exists(tokenId), \"ERC721Metadata: URI query for nonexistent token\");\n\n    string memory baseURI = _baseURI();\n    return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \"\";\n  }\n\n  /**\n   * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\n   * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\n   * by default, can be overriden in child contracts.\n   */\n  function _baseURI() internal view virtual returns (string memory) {\n    return \"\";\n  }\n\n  /**\n   * @dev See {IERC721-safeTransferFrom}.\n   */\n  function transferFrom(address from, address to, uint256 tokenId, bytes memory _remark) public virtual override {\n    require(_isOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\n    _safeTransfer(from, to, tokenId, _remark);\n  }\n\n  /**\n   * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n   * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n   *\n   * `_data` is additional data, it has no specified format and it is sent in call to `to`.\n   *\n   * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\n   * implement alternative mechanisms to perform token transfer, such as signature-based.\n   *\n   * Requirements:\n   *\n   * - `from` cannot be the zero address.\n   * - `to` cannot be the zero address.\n   * - `tokenId` token must exist and be owned by `from`.\n   * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n   *\n   * Emits a {Transfer} event.\n   */\n  function _safeTransfer(address from, address to, uint256 tokenId, bytes memory _data) internal virtual {\n    _transfer(from, to, tokenId);\n    require(_checkOnERC721Received(from, to, tokenId, _data), \"ERC721: transfer to non ERC721Receiver implementer\");\n  }\n\n  /**\n   * @dev Returns whether `tokenId` exists.\n   *\n   * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\n   *\n   * Tokens start existing when they are minted (`_mint`),\n   * and stop existing when they are burned (`_burn`).\n   */\n  function _exists(uint256 tokenId) internal view virtual returns (bool) {\n    return _owners[tokenId] != address(0);\n  }\n\n  /**\n   * @dev Returns whether `spender` is allowed to manage `tokenId`.\n   *\n   * Requirements:\n   *\n   * - `tokenId` must exist.\n   */\n  function _isOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\n    require(_exists(tokenId), \"ERC721: operator query for nonexistent token\");\n    address owner = SBTUpgradeable.ownerOf(tokenId);\n    return spender == owner;\n  }\n\n  /**\n   * @dev Safely mints `tokenId` and transfers it to `to`.\n   *\n   * Requirements:\n   *\n   * - `tokenId` must not exist.\n   * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n   *\n   * Emits a {Transfer} event.\n   */\n  function _safeMint(address to, uint256 tokenId) internal virtual {\n    _safeMint(to, tokenId, \"\");\n  }\n\n  /**\n   * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\n   * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\n   */\n  function _safeMint(address to, uint256 tokenId, bytes memory _data) internal virtual {\n    _mint(to, tokenId);\n    require(\n      _checkOnERC721Received(address(0), to, tokenId, _data),\n      \"ERC721: transfer to non ERC721Receiver implementer\"\n    );\n  }\n\n  /**\n   * @dev Mints `tokenId` and transfers it to `to`.\n   *\n   * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\n   *\n   * Requirements:\n   *\n   * - `tokenId` must not exist.\n   * - `to` cannot be the zero address.\n   *\n   * Emits a {Transfer} event.\n   */\n  function _mint(address to, uint256 tokenId) internal virtual {\n    require(to != address(0), \"ERC721: mint to the zero address\");\n    require(!_exists(tokenId), \"ERC721: token already minted\");\n\n    _beforeTokenTransfer(address(0), to, tokenId);\n\n    _balances[to] += 1;\n    _owners[tokenId] = to;\n\n    emit Transfer(address(0), to, tokenId);\n\n    _afterTokenTransfer(address(0), to, tokenId);\n  }\n\n  /**\n   * @dev Destroys `tokenId`.\n   * The approval is cleared when the token is burned.\n   *\n   * Requirements:\n   *\n   * - `tokenId` must exist.\n   *\n   * Emits a {Transfer} event.\n   */\n  function _burn(uint256 tokenId) internal virtual {\n    address owner = SBTUpgradeable.ownerOf(tokenId);\n\n    _beforeTokenTransfer(owner, address(0), tokenId);\n\n    _balances[owner] -= 1;\n    delete _owners[tokenId];\n\n    emit Transfer(owner, address(0), tokenId);\n\n    _afterTokenTransfer(owner, address(0), tokenId);\n  }\n\n  /**\n   * @dev Transfers `tokenId` from `from` to `to`.\n   *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\n   *\n   * Requirements:\n   *\n   * - `to` cannot be the zero address.\n   * - `tokenId` token must be owned by `from`.\n   *\n   * Emits a {Transfer} event.\n   */\n  function _transfer(address from, address to, uint256 tokenId) internal virtual {\n    require(SBTUpgradeable.ownerOf(tokenId) == from, \"ERC721: transfer from incorrect owner\");\n    require(to != address(0), \"ERC721: transfer to the zero address\");\n\n    _beforeTokenTransfer(from, to, tokenId);\n\n    _balances[from] -= 1;\n    _balances[to] += 1;\n    _owners[tokenId] = to;\n\n    emit Transfer(from, to, tokenId);\n\n    _afterTokenTransfer(from, to, tokenId);\n  }\n\n  /**\n   * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\n   * The call is not executed if the target address is not a contract.\n   *\n   * @param from address representing the previous owner of the given token ID\n   * @param to target address that will receive the tokens\n   * @param tokenId uint256 ID of the token to be transferred\n   * @param _data bytes optional data to send along with the call\n   * @return bool whether the call correctly returned the expected magic value\n   */\n  function _checkOnERC721Received(\n    address from,\n    address to,\n    uint256 tokenId,\n    bytes memory _data\n  ) private returns (bool) {\n    if (to.isContract()) {\n      try IERC721ReceiverUpgradeable(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\n        return retval == IERC721ReceiverUpgradeable.onERC721Received.selector;\n      } catch (bytes memory reason) {\n        if (reason.length == 0) {\n          revert(\"ERC721: transfer to non ERC721Receiver implementer\");\n        } else {\n          assembly {\n            revert(add(32, reason), mload(reason))\n          }\n        }\n      }\n    } else {\n      return true;\n    }\n  }\n\n  /**\n   * @dev Hook that is called before any token transfer. This includes minting\n   * and burning.\n   *\n   * Calling conditions:\n   *\n   * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\n   * transferred to `to`.\n   * - When `from` is zero, `tokenId` will be minted for `to`.\n   * - When `to` is zero, ``from``'s `tokenId` will be burned.\n   * - `from` and `to` are never both zero.\n   *\n   * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n   */\n  function _beforeTokenTransfer(address from, address to, uint256 tokenId) internal virtual {}\n\n  /**\n   * @dev Hook that is called after any transfer of tokens. This includes\n   * minting and burning.\n   *\n   * Calling conditions:\n   *\n   * - when `from` and `to` are both non-zero.\n   * - `from` and `to` are never both zero.\n   *\n   * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n   */\n  function _afterTokenTransfer(address from, address to, uint256 tokenId) internal virtual {}\n\n  /**\n   * @dev This empty reserved space is put in place to allow future versions to add new\n   * variables without shifting down storage in the inheritance chain.\n   * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n   */\n  uint256[46] private __gap;\n}\n"
    },
    "contracts/interfaces/ITitleEscrow.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\";\n\n/**\n * @title ITitleEscrow\n * @notice Interface for TitleEscrow contract. The TitleEscrow contract represents a title escrow for transferable records.\n * @dev Inherits from IERC721Receiver.\n */\ninterface ITitleEscrow is IERC721Receiver {\n  event TokenReceived(\n    address indexed beneficiary,\n    address indexed holder,\n    bool indexed isMinting,\n    address registry,\n    uint256 tokenId,\n    bytes remark\n  );\n  event Nomination(\n    address indexed prevNominee,\n    address indexed nominee,\n    address registry,\n    uint256 tokenId,\n    bytes remark\n  );\n  event BeneficiaryTransfer(\n    address indexed fromBeneficiary,\n    address indexed toBeneficiary,\n    address registry,\n    uint256 tokenId,\n    bytes remark\n  );\n  event HolderTransfer(\n    address indexed fromHolder,\n    address indexed toHolder,\n    address registry,\n    uint256 tokenId,\n    bytes remark\n  );\n  event Surrender(address indexed surrenderer, address registry, uint256 tokenId, bytes remark);\n  event Shred(address registry, uint256 tokenId, bytes remark);\n  event RejectTransferOwners(\n    address indexed fromBeneficiary,\n    address indexed toBeneficiary,\n    address indexed fromHolder,\n    address toHolder,\n    address registry,\n    uint256 tokenId,\n    bytes remark\n  );\n  event RejectTransferBeneficiary(\n    address indexed fromBeneficiary,\n    address indexed toBeneficiary,\n    address registry,\n    uint256 tokenId,\n    bytes remark\n  );\n  event RejectTransferHolder(\n    address indexed fromHolder,\n    address indexed toHolder,\n    address registry,\n    uint256 tokenId,\n    bytes remark\n  );\n\n  /**\n   * @notice Allows the beneficiary to nominate a new beneficiary\n   * @dev The nominated beneficiary will need to be transferred by the holder to become the actual beneficiary\n   * @param nominee The address of the nominee\n   */\n  function nominate(address nominee, bytes calldata remark) external;\n\n  /**\n   * @notice Allows the holder to transfer the beneficiary role to the nominated beneficiary or to themselves\n   * @param nominee The address of the new beneficiary\n   */\n  function transferBeneficiary(address nominee, bytes calldata remark) external;\n\n  /**\n   * @notice Allows the holder to transfer their role to another address\n   * @param newHolder The address of the new holder\n   */\n  function transferHolder(address newHolder, bytes calldata remark) external;\n\n  /**\n   * @notice Allows for the simultaneous transfer of both beneficiary and holder roles\n   * @param nominee The address of the new beneficiary\n   * @param newHolder The address of the new holder\n   */\n  function transferOwners(address nominee, address newHolder, bytes calldata remark) external;\n\n  /**\n   * @notice Allows the new beneficiary to reject the nomination\n   * @param _remark The remark for the rejection\n   */\n  function rejectTransferBeneficiary(bytes calldata _remark) external;\n\n  /**\n   * @notice Allows the new holder to reject the transfer of the holder role\n   * @param _remark The remark for the rejection\n   */\n  function rejectTransferHolder(bytes calldata _remark) external;\n\n  /**\n   * @notice Allows the new beneficiary and holder to reject the transfer of both roles\n   * @param _remark The remark for the rejection\n   */\n  function rejectTransferOwners(bytes calldata _remark) external;\n\n  function beneficiary() external view returns (address);\n\n  function holder() external view returns (address);\n\n  function prevBeneficiary() external view returns (address);\n\n  function prevHolder() external view returns (address);\n\n  function active() external view returns (bool);\n\n  function nominee() external view returns (address);\n\n  function registry() external view returns (address);\n\n  function tokenId() external view returns (uint256);\n\n  /**\n   * @notice Check if the TitleEscrow is currently holding a token\n   * @return A boolean indicating whether the contract is holding a token\n   */\n  function isHoldingToken() external returns (bool);\n\n  /**\n   * @notice Allows the beneficiary and holder to surrender the token back to the registry\n   */\n  function surrender(bytes calldata remark) external;\n\n  /**\n   * @notice Allows the registry to shred the TitleEscrow by marking it as inactive and reset the beneficiary and holder addresses\n   */\n  function shred(bytes calldata remark) external;\n}\n"
    },
    "contracts/interfaces/ITitleEscrowFactory.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\npragma solidity ^0.8.0;\n\ninterface ITitleEscrowFactory {\n  event TitleEscrowCreated(address indexed titleEscrow, address indexed tokenRegistry, uint256 indexed tokenId);\n\n  function implementation() external view returns (address);\n\n  /**\n   * @notice Creates a new clone of the TitleEscrow contract and initializes it with the sender's address and the provided token ID.\n   * @dev The function will revert if it is called by an EOA.\n   * @param tokenId The ID of the token.\n   * @return The address of the newly created TitleEscrow contract.\n   */\n  function create(uint256 tokenId) external returns (address);\n\n  /**\n   * @notice Returns the address of a TitleEscrow contract that would be created with the provided token registry address and token ID.\n   * @param tokenRegistry The address of the token registry.\n   * @param tokenId The ID of the token.\n   * @return The address of the TitleEscrow contract.\n   */\n  function getAddress(address tokenRegistry, uint256 tokenId) external view returns (address);\n}\n"
    },
    "contracts/interfaces/TradeTrustTokenErrors.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\npragma solidity ^0.8.0;\n\ninterface TradeTrustTokenErrors {\n  error TokenNotSurrendered();\n\n  error InvalidTokenId();\n\n  error TokenExists();\n\n  error TransferFailure();\n\n  error RemarkLengthExceeded();\n}\n"
    },
    "contracts/interfaces/ITradeTrustSBT.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721ReceiverUpgradeable.sol\";\nimport \"./ISBTUpgradeable.sol\";\nimport \"./ITitleEscrowFactory.sol\";\n\ninterface ITradeTrustSBT is IERC721ReceiverUpgradeable, ISBTUpgradeable {\n  // Event emitted when the contract is paused with a remark.\n  event PauseWithRemark(address account, bytes remark);\n\n  // Event emitted when the contract is unpaused with a remark.\n  event UnpauseWithRemark(address account, bytes remark);\n  /**\n   * @notice Returns the block number when the contract was created.\n   * @return The block number of the contract's creation.\n   */\n  function genesis() external view returns (uint256);\n\n  /**\n   * @notice Returns the TitleEscrowFactory address associated with this contract.\n   * @return The address of the TitleEscrowFactory contract.\n   */\n  function titleEscrowFactory() external view returns (ITitleEscrowFactory);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC721/IERC721ReceiverUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721Receiver.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721ReceiverUpgradeable {\n  /**\n   * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n   * by `operator` from `from`, this function is called.\n   *\n   * It must return its Solidity selector to confirm the token transfer.\n   * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n   *\n   * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\n   */\n  function onERC721Received(\n    address operator,\n    address from,\n    uint256 tokenId,\n    bytes calldata data\n  ) external returns (bytes4);\n}\n"
    },
    "contracts/interfaces/ISBTUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface ISBTUpgradeable is IERC165Upgradeable {\n  /**\n   * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n   */\n  event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n  /**\n   * @dev Returns the number of tokens in ``owner``'s account.\n   */\n  function balanceOf(address owner) external view returns (uint256 balance);\n\n  /**\n   * @dev Returns the owner of the `tokenId` token.\n   *\n   * Requirements:\n   *\n   * - `tokenId` must exist.\n   */\n  function ownerOf(uint256 tokenId) external view returns (address owner);\n\n  /**\n   * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n   * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n   *\n   * Requirements:\n   *\n   * - `from` cannot be the zero address.\n   * - `to` cannot be the zero address.\n   * - `tokenId` token must exist and be owned by `from`.\n   * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\n   * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n   *\n   * Emits a {Transfer} event.\n   */\n  function transferFrom(address from, address to, uint256 tokenId, bytes memory remark) external;\n}\n"
    },
    "contracts/interfaces/IERC721MetadataUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./ISBTUpgradeable.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721MetadataUpgradeable is ISBTUpgradeable {\n  /**\n   * @dev Returns the token collection name.\n   */\n  function name() external view returns (string memory);\n\n  /**\n   * @dev Returns the token collection symbol.\n   */\n  function symbol() external view returns (string memory);\n\n  /**\n   * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n   */\n  function tokenURI(uint256 tokenId) external view returns (string memory);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721Receiver.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721Receiver {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
    },
    "contracts/base/TradeTrustTokenRestorable.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\npragma solidity ^0.8.0;\n\nimport \"./TradeTrustSBT.sol\";\nimport \"./RegistryAccess.sol\";\nimport \"../interfaces/ITradeTrustTokenRestorable.sol\";\n\n/**\n * @title TradeTrustTokenRestorable\n * @dev This contract defines the restore functionality for the TradeTrustToken.\n */\nabstract contract TradeTrustTokenRestorable is TradeTrustSBT, RegistryAccess, ITradeTrustTokenRestorable {\n  /**\n   * @dev See {ERC165Upgradeable-supportsInterface}.\n   */\n  function supportsInterface(\n    bytes4 interfaceId\n  ) public view virtual override(TradeTrustSBT, RegistryAccess) returns (bool) {\n    return interfaceId == type(ITradeTrustTokenRestorable).interfaceId || super.supportsInterface(interfaceId);\n  }\n\n  /**\n   * @dev See {ITradeTrustTokenRestorable-restore}.\n   */\n  function restore(\n    uint256 tokenId,\n    bytes calldata _remark\n  ) external virtual override whenNotPaused onlyRole(RESTORER_ROLE) remarkLengthLimit(_remark) returns (address) {\n    if (!_exists(tokenId)) {\n      revert InvalidTokenId();\n    }\n    if (ownerOf(tokenId) != address(this)) {\n      revert TokenNotSurrendered();\n    }\n\n    address titleEscrow = titleEscrowFactory().getAddress(address(this), tokenId);\n    _registryTransferTo(titleEscrow, tokenId, _remark);\n\n    return titleEscrow;\n  }\n}\n"
    },
    "contracts/interfaces/ITradeTrustTokenRestorable.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\npragma solidity ^0.8.0;\n\ninterface ITradeTrustTokenRestorable {\n  /**\n   * @dev Restore a surrendered token.\n   * @param tokenId The ID of the token to restore.\n   * @return The address of the TitleEscrow contract.\n   */\n  function restore(uint256 tokenId, bytes memory remark) external returns (address);\n}\n"
    },
    "contracts/interfaces/ITradeTrustToken.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\npragma solidity ^0.8.0;\n\nimport \"./ITradeTrustSBT.sol\";\nimport \"./ITradeTrustTokenRestorable.sol\";\nimport \"./ITradeTrustTokenBurnable.sol\";\nimport \"./ITradeTrustTokenMintable.sol\";\n\ninterface ITradeTrustToken is\n  ITradeTrustTokenMintable,\n  ITradeTrustTokenBurnable,\n  ITradeTrustTokenRestorable,\n  ITradeTrustSBT\n{}\n"
    },
    "contracts/interfaces/ITradeTrustTokenBurnable.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\npragma solidity ^0.8.0;\n\ninterface ITradeTrustTokenBurnable {\n  /**\n   * @dev Burn a token.\n   * @param tokenId The ID of the token to burn.\n   */\n  function burn(uint256 tokenId, bytes memory remark) external;\n}\n"
    },
    "contracts/interfaces/ITradeTrustTokenMintable.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\npragma solidity ^0.8.0;\n\ninterface ITradeTrustTokenMintable {\n  /**\n   * @dev Mint a TradeTrust token.\n   * @param beneficiary The beneficiary of the token.\n   * @param holder The holder of the token.\n   * @param tokenId The ID of the token to mint.\n   * @param remark The remark added by the minter\n   * @return The address of the corresponding TitleEscrow.\n   */\n  function mint(address beneficiary, address holder, uint256 tokenId, bytes memory remark) external returns (address);\n}\n"
    },
    "contracts/TitleEscrow.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/proxy/utils/Initializable.sol\";\nimport \"@openzeppelin/contracts/security/Pausable.sol\";\nimport \"@openzeppelin/contracts/interfaces/IERC165.sol\";\nimport \"./interfaces/ITitleEscrow.sol\";\nimport \"./interfaces/ITradeTrustToken.sol\";\nimport \"./interfaces/TitleEscrowErrors.sol\";\n\n/**\n * @title TitleEscrow\n * @dev Title escrow contract for managing the beneficiaries and holders of a transferable record.\n */\ncontract TitleEscrow is Initializable, IERC165, TitleEscrowErrors, ITitleEscrow {\n  address public override registry;\n  uint256 public override tokenId;\n\n  address public override beneficiary;\n  address public override holder;\n\n  address public override prevBeneficiary;\n  address public override prevHolder;\n\n  address public override nominee;\n\n  bool public override active;\n\n  bytes public remark;\n\n  constructor() initializer {}\n\n  /**\n   * @dev Modifier to make a function callable only by the beneficiary.\n   */\n  modifier onlyBeneficiary() {\n    if (msg.sender != beneficiary) {\n      revert CallerNotBeneficiary();\n    }\n    _;\n  }\n\n  /**\n   * @dev Modifier to make a function callable only by the holder.\n   */\n  modifier onlyHolder() {\n    if (msg.sender != holder) {\n      revert CallerNotHolder();\n    }\n    _;\n  }\n\n  /**\n   * @dev Modifier to ensure the contract is holding the token.\n   */\n  modifier whenHoldingToken() {\n    if (!_isHoldingToken()) {\n      revert TitleEscrowNotHoldingToken();\n    }\n    _;\n  }\n\n  /**\n   * @dev Modifier to ensure the registry is not paused.\n   */\n  modifier whenNotPaused() {\n    bool paused = Pausable(registry).paused();\n    if (paused) {\n      revert RegistryContractPaused();\n    }\n    _;\n  }\n\n  /**\n   * @dev Modifier to ensure the title escrow is active.\n   */\n  modifier whenActive() {\n    if (!active) {\n      revert InactiveTitleEscrow();\n    }\n    _;\n  }\n  /**\n   * @dev Modifier to check if the bytes length is within the limit\n   */\n  modifier remarkLengthLimit(bytes calldata _remark) {\n    if (_remark.length > 120) revert RemarkLengthExceeded();\n    _;\n  }\n\n  /**\n   * @notice Initializes the TitleEscrow contract with the registry address and the tokenId\n   * @param _registry The address of the registry\n   * @param _tokenId The id of the token\n   */\n  function initialize(address _registry, uint256 _tokenId) public virtual initializer {\n    __TitleEscrow_init(_registry, _tokenId);\n  }\n\n  /**\n   * @notice Initializes the TitleEscrow contract with the registry address and the tokenId\n   */\n  function __TitleEscrow_init(address _registry, uint256 _tokenId) internal virtual onlyInitializing {\n    registry = _registry;\n    tokenId = _tokenId;\n    active = true;\n  }\n\n  /**\n   * @dev See {ERC165-supportsInterface}.\n   */\n  function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n    return interfaceId == type(ITitleEscrow).interfaceId;\n  }\n\n  /**\n   * @dev See {IERC721Receiver-onERC721Received}.\n   */\n  function onERC721Received(\n    address /* operator */,\n    address /* from */,\n    uint256 _tokenId,\n    bytes calldata data\n  ) external virtual override whenNotPaused whenActive returns (bytes4) {\n    if (_tokenId != tokenId) {\n      revert InvalidTokenId(_tokenId);\n    }\n    if (msg.sender != address(registry)) {\n      revert InvalidRegistry(msg.sender);\n    }\n    bool isMinting = false;\n    if (beneficiary == address(0) || holder == address(0)) {\n      if (data.length == 0) {\n        revert EmptyReceivingData();\n      }\n      (address _beneficiary, address _holder, bytes memory _remark) = abi.decode(data, (address, address, bytes));\n      if (_beneficiary == address(0) || _holder == address(0)) {\n        revert InvalidTokenTransferToZeroAddressOwners(_beneficiary, _holder);\n      }\n      _setBeneficiary(_beneficiary, \"\");\n      _setHolder(_holder, \"\");\n      remark = _remark;\n      isMinting = true;\n    } else remark = data;\n\n    emit TokenReceived(beneficiary, holder, isMinting, registry, tokenId, remark);\n    return bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"));\n  }\n\n  /**\n   * @dev See {ITitleEscrow-nominate}.\n   */\n  function nominate(\n    address _nominee,\n    bytes calldata _remark\n  ) public virtual override whenNotPaused whenActive onlyBeneficiary whenHoldingToken remarkLengthLimit(_remark) {\n    if (beneficiary == _nominee) {\n      revert TargetNomineeAlreadyBeneficiary();\n    }\n    if (nominee == _nominee) {\n      revert NomineeAlreadyNominated();\n    }\n    prevBeneficiary = address(0);\n    if (beneficiary == holder) prevHolder = address(0);\n    remark = _remark;\n\n    _setNominee(_nominee, _remark);\n  }\n\n  /**\n   * @dev See {ITitleEscrow-transferBeneficiary}.\n   */\n  function transferBeneficiary(\n    address _nominee,\n    bytes calldata _remark\n  ) public virtual override whenNotPaused whenActive onlyHolder whenHoldingToken remarkLengthLimit(_remark) {\n    if (_nominee == address(0)) {\n      revert InvalidTransferToZeroAddress();\n    }\n    if (!(beneficiary == holder || nominee == _nominee)) {\n      revert InvalidNominee();\n    }\n    prevHolder = address(0);\n    prevBeneficiary = beneficiary;\n    remark = _remark;\n\n    _setBeneficiary(_nominee, _remark);\n  }\n\n  /**\n   * @dev See {ITitleEscrow-transferHolder}.\n   */\n  function transferHolder(\n    address newHolder,\n    bytes calldata _remark\n  ) public virtual override whenNotPaused whenActive onlyHolder whenHoldingToken remarkLengthLimit(_remark) {\n    if (newHolder == address(0)) {\n      revert InvalidTransferToZeroAddress();\n    }\n    if (holder == newHolder) {\n      revert RecipientAlreadyHolder();\n    }\n    if (beneficiary == holder) prevBeneficiary = address(0);\n    prevHolder = holder;\n    remark = _remark;\n\n    _setHolder(newHolder, _remark);\n  }\n\n  /**\n   * @dev See {ITitleEscrow-transferOwners}.\n   */\n  function transferOwners(address _nominee, address newHolder, bytes calldata _remark) external virtual override {\n    transferBeneficiary(_nominee, _remark);\n    transferHolder(newHolder, _remark);\n  }\n\n  /**\n   * @dev See {ITitleEscrow-rejectTransferBeneficiary}.\n   */\n  function rejectTransferBeneficiary(\n    bytes calldata _remark\n  ) public virtual override whenNotPaused whenActive onlyBeneficiary whenHoldingToken remarkLengthLimit(_remark) {\n    if (prevBeneficiary == address(0)) {\n      revert InvalidTransferToZeroAddress();\n    }\n    if (beneficiary == holder) {\n      revert DualRoleRejectionRequired();\n    }\n    remark = _remark;\n    address from = beneficiary;\n    address to = prevBeneficiary;\n\n    _setBeneficiary(to, _remark);\n    prevBeneficiary = address(0);\n    emit RejectTransferBeneficiary(from, to, registry, tokenId, _remark);\n  }\n\n  /**\n   * @dev See {ITitleEscrow-rejectTransferHolder}.\n   */\n  function rejectTransferHolder(\n    bytes calldata _remark\n  ) public virtual override whenNotPaused whenActive onlyHolder whenHoldingToken remarkLengthLimit(_remark) {\n    if (prevHolder == address(0)) {\n      revert InvalidTransferToZeroAddress();\n    }\n    if (holder == beneficiary) {\n      revert DualRoleRejectionRequired();\n    }\n    remark = _remark;\n    address from = holder;\n    address to = prevHolder;\n\n    _setHolder(to, _remark);\n    prevHolder = address(0);\n\n    emit RejectTransferHolder(from, to, registry, tokenId, _remark);\n  }\n\n  /**\n   * @dev See {ITitleEscrow-rejectTransferOwners}.\n   */\n  function rejectTransferOwners(\n    bytes calldata _remark\n  )\n    external\n    virtual\n    override\n    whenNotPaused\n    whenActive\n    whenHoldingToken\n    onlyBeneficiary\n    onlyHolder\n    remarkLengthLimit(_remark)\n  {\n    if (prevBeneficiary == address(0) || prevHolder == address(0)) {\n      revert InvalidTransferToZeroAddress();\n    }\n    remark = _remark;\n    address fromHolder = holder;\n    address toHolder = prevHolder;\n    address fromBeneficiary = beneficiary;\n    address toBeneficiary = prevBeneficiary;\n    _setBeneficiary(toBeneficiary, _remark);\n    _setHolder(toHolder, _remark);\n    prevBeneficiary = address(0);\n    prevHolder = address(0);\n    emit RejectTransferOwners(fromBeneficiary, toBeneficiary, fromHolder, toHolder, registry, tokenId, _remark);\n  }\n\n  /**\n   * @dev See {ITitleEscrow-surrender}.\n   */\n  function surrender(\n    bytes calldata _remark\n  )\n    external\n    virtual\n    override\n    whenNotPaused\n    whenActive\n    onlyBeneficiary\n    onlyHolder\n    whenHoldingToken\n    remarkLengthLimit(_remark)\n  {\n    _setNominee(address(0), \"\");\n    ITradeTrustToken(registry).transferFrom(address(this), registry, tokenId, \"\");\n    remark = _remark;\n    prevBeneficiary = address(0);\n    prevHolder = address(0);\n\n    emit Surrender(msg.sender, registry, tokenId, _remark);\n  }\n\n  /**\n   * @dev See {ITitleEscrow-shred}.\n   */\n  function shred(bytes calldata _remark) external virtual override whenNotPaused whenActive remarkLengthLimit(_remark) {\n    if (_isHoldingToken()) {\n      revert TokenNotSurrendered();\n    }\n    if (msg.sender != registry) {\n      revert InvalidRegistry(msg.sender);\n    }\n\n    _setBeneficiary(address(0), \"\");\n    _setHolder(address(0), \"\");\n    active = false;\n    remark = _remark;\n\n    emit Shred(registry, tokenId, _remark);\n  }\n\n  /**\n   * @dev See {ITitleEscrow-isHoldingToken}.\n   */\n  function isHoldingToken() external view override returns (bool) {\n    return _isHoldingToken();\n  }\n\n  /**\n   * @notice Internal function to check if the contract is holding a token\n   * @return A boolean indicating whether the contract is holding a token\n   */\n  function _isHoldingToken() internal view returns (bool) {\n    return ITradeTrustToken(registry).ownerOf(tokenId) == address(this);\n  }\n\n  /**\n   * @notice Sets the nominee\n   * @param newNominee The address of the new nominee\n   */\n  function _setNominee(address newNominee, bytes memory _remark) internal virtual {\n    emit Nomination(nominee, newNominee, registry, tokenId, _remark);\n    nominee = newNominee;\n  }\n\n  /**\n   * @notice Sets the beneficiary\n   * @param newBeneficiary The address of the new beneficiary\n   */\n  function _setBeneficiary(address newBeneficiary, bytes memory _remark) internal virtual {\n    emit BeneficiaryTransfer(beneficiary, newBeneficiary, registry, tokenId, _remark);\n    if (nominee != address(0)) _setNominee(address(0), \"0x\");\n    beneficiary = newBeneficiary;\n  }\n\n  /**\n   * @notice Sets the holder\n   * @param newHolder The address of the new holder\n   */\n  function _setHolder(address newHolder, bytes memory _remark) internal virtual {\n    emit HolderTransfer(holder, newHolder, registry, tokenId, _remark);\n    holder = newHolder;\n  }\n}\n"
    },
    "@openzeppelin/contracts/proxy/utils/Initializable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/Initializable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/Address.sol\";\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() initializer {}\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     */\n    bool private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Modifier to protect an initializer function from being invoked twice.\n     */\n    modifier initializer() {\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\n        // contract may have been reentered.\n        require(_initializing ? _isConstructor() : !_initialized, \"Initializable: contract is already initialized\");\n\n        bool isTopLevelCall = !_initializing;\n        if (isTopLevelCall) {\n            _initializing = true;\n            _initialized = true;\n        }\n\n        _;\n\n        if (isTopLevelCall) {\n            _initializing = false;\n        }\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} modifier, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        require(_initializing, \"Initializable: contract is not initializing\");\n        _;\n    }\n\n    function _isConstructor() private view returns (bool) {\n        return !Address.isContract(address(this));\n    }\n}\n"
    },
    "@openzeppelin/contracts/security/Pausable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\nabstract contract Pausable is Context {\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    bool private _paused;\n\n    /**\n     * @dev Initializes the contract in unpaused state.\n     */\n    constructor() {\n        _paused = false;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view virtual returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenNotPaused() {\n        require(!paused(), \"Pausable: paused\");\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    modifier whenPaused() {\n        require(paused(), \"Pausable: not paused\");\n        _;\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause() internal virtual whenNotPaused {\n        _paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function _unpause() internal virtual whenPaused {\n        _paused = false;\n        emit Unpaused(_msgSender());\n    }\n}\n"
    },
    "@openzeppelin/contracts/interfaces/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/introspection/IERC165.sol\";\n"
    },
    "contracts/interfaces/TitleEscrowErrors.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\npragma solidity ^0.8.0;\n\ninterface TitleEscrowErrors {\n  error CallerNotBeneficiary();\n\n  error CallerNotHolder();\n\n  error TitleEscrowNotHoldingToken();\n\n  error RegistryContractPaused();\n\n  error InactiveTitleEscrow();\n\n  error InvalidTokenId(uint256 tokenId);\n\n  error InvalidRegistry(address registry);\n\n  error EmptyReceivingData();\n\n  error InvalidTokenTransferToZeroAddressOwners(address beneficiary, address holder);\n\n  error TargetNomineeAlreadyBeneficiary();\n\n  error NomineeAlreadyNominated();\n\n  error InvalidTransferToZeroAddress();\n\n  error InvalidNominee();\n\n  error RecipientAlreadyHolder();\n\n  error TokenNotSurrendered();\n\n  error RemarkLengthExceeded();\n\n  error DualRoleRejectionRequired();\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "contracts/TitleEscrowFactory.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/proxy/Clones.sol\";\nimport \"./TitleEscrow.sol\";\nimport \"./interfaces/ITitleEscrowFactory.sol\";\nimport \"./interfaces/TitleEscrowFactoryErrors.sol\";\n\n/**\n * @title TitleEscrowFactory\n */\ncontract TitleEscrowFactory is ITitleEscrowFactory, TitleEscrowFactoryErrors {\n  address public override implementation;\n\n  /**\n   * @notice Creates a new TitleEscrowFactory contract.\n   * @dev Sets `implementation` with the address of a newly created TitleEscrow contract.\n   */\n  constructor() {\n    implementation = address(new TitleEscrow());\n  }\n\n  /**\n   * @dev See {ITitleEscrowFactory-create}.\n   */\n  function create(uint256 tokenId) external override returns (address) {\n    if (tx.origin == msg.sender) {\n      revert CreateCallerNotContract();\n    }\n    bytes32 salt = keccak256(abi.encodePacked(msg.sender, tokenId));\n    address titleEscrow = Clones.cloneDeterministic(implementation, salt);\n    TitleEscrow(titleEscrow).initialize(msg.sender, tokenId);\n\n    emit TitleEscrowCreated(titleEscrow, msg.sender, tokenId);\n\n    return titleEscrow;\n  }\n\n  /**\n   * @dev See {ITitleEscrowFactory-getAddress}.\n   */\n  function getAddress(address tokenRegistry, uint256 tokenId) external view override returns (address) {\n    return Clones.predictDeterministicAddress(implementation, keccak256(abi.encodePacked(tokenRegistry, tokenId)));\n  }\n}\n"
    },
    "@openzeppelin/contracts/proxy/Clones.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (proxy/Clones.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev https://eips.ethereum.org/EIPS/eip-1167[EIP 1167] is a standard for\n * deploying minimal proxy contracts, also known as \"clones\".\n *\n * > To simply and cheaply clone contract functionality in an immutable way, this standard specifies\n * > a minimal bytecode implementation that delegates all calls to a known, fixed address.\n *\n * The library includes functions to deploy a proxy using either `create` (traditional deployment) or `create2`\n * (salted deterministic deployment). It also includes functions to predict the addresses of clones deployed using the\n * deterministic method.\n *\n * _Available since v3.4._\n */\nlibrary Clones {\n    /**\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\n     *\n     * This function uses the create opcode, which should never revert.\n     */\n    function clone(address implementation) internal returns (address instance) {\n        assembly {\n            let ptr := mload(0x40)\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\n            instance := create(0, ptr, 0x37)\n        }\n        require(instance != address(0), \"ERC1167: create failed\");\n    }\n\n    /**\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\n     *\n     * This function uses the create2 opcode and a `salt` to deterministically deploy\n     * the clone. Using the same `implementation` and `salt` multiple time will revert, since\n     * the clones cannot be deployed twice at the same address.\n     */\n    function cloneDeterministic(address implementation, bytes32 salt) internal returns (address instance) {\n        assembly {\n            let ptr := mload(0x40)\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\n            instance := create2(0, ptr, 0x37, salt)\n        }\n        require(instance != address(0), \"ERC1167: create2 failed\");\n    }\n\n    /**\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\n     */\n    function predictDeterministicAddress(\n        address implementation,\n        bytes32 salt,\n        address deployer\n    ) internal pure returns (address predicted) {\n        assembly {\n            let ptr := mload(0x40)\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf3ff00000000000000000000000000000000)\n            mstore(add(ptr, 0x38), shl(0x60, deployer))\n            mstore(add(ptr, 0x4c), salt)\n            mstore(add(ptr, 0x6c), keccak256(ptr, 0x37))\n            predicted := keccak256(add(ptr, 0x37), 0x55)\n        }\n    }\n\n    /**\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\n     */\n    function predictDeterministicAddress(address implementation, bytes32 salt)\n        internal\n        view\n        returns (address predicted)\n    {\n        return predictDeterministicAddress(implementation, salt, address(this));\n    }\n}\n"
    },
    "contracts/interfaces/TitleEscrowFactoryErrors.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\npragma solidity ^0.8.0;\n\ninterface TitleEscrowFactoryErrors {\n  error CreateCallerNotContract();\n}\n"
    },
    "contracts/mocks/TitleEscrowFactoryGetterMock.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\npragma solidity ^0.8.0;\n\nimport \"../interfaces/ITitleEscrowFactory.sol\";\n\ncontract TitleEscrowFactoryGetterMock {\n  address private titleEscrowAddress;\n  function callCreate(address titleEscrowFactory, uint256 tokenId) public {\n    ITitleEscrowFactory(titleEscrowFactory).create(tokenId);\n  }\n\n  //setting the address of the titleEscrow contract so that it returns correct address when called by registry\n  function setAddress(address _titleEscrowAddress) public {\n    titleEscrowAddress = _titleEscrowAddress;\n  }\n  function getAddress(address tokenRegistry, uint256 tokenId) external view returns (address) {\n    if (titleEscrowAddress == address(0)) {\n      return ITitleEscrowFactory(tokenRegistry).getAddress(tokenRegistry, tokenId);\n    }\n    return titleEscrowAddress;\n  }\n}\n"
    },
    "contracts/mocks/TitleEscrowFactoryCallerMock.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\npragma solidity ^0.8.0;\n\nimport \"../interfaces/ITitleEscrowFactory.sol\";\n\ncontract TitleEscrowFactoryCallerMock {\n  function callCreate(address titleEscrowFactory, uint256 tokenId) public {\n    ITitleEscrowFactory(titleEscrowFactory).create(tokenId);\n  }\n}\n"
    },
    "contracts/mocks/SBTUpgradeableMock.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\npragma solidity ^0.8.0;\n\nimport \"../base/SBTUpgradeable.sol\";\n\ncontract SBTUpgradeableMock is SBTUpgradeable {\n  constructor(string memory name, string memory symbol) initializer {\n    __SBT_init(name, symbol);\n  }\n\n  function baseURIInternal() public view returns (string memory) {\n    return _baseURI();\n  }\n\n  function existsInternal(uint256 tokenId) public view returns (bool) {\n    return _exists(tokenId);\n  }\n\n  function safeMintInternal(address to, uint256 tokenId) public {\n    _safeMint(to, tokenId);\n  }\n\n  function safeMintWithDataInternal(\n    address to,\n    uint256 tokenId,\n    bytes memory data\n  ) public {\n    _safeMint(to, tokenId, data);\n  }\n\n  function burn(uint256 tokenId) public {\n    _burn(tokenId);\n  }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/ERC1967/ERC1967Upgrade.sol)\n\npragma solidity ^0.8.2;\n\nimport \"../beacon/IBeaconUpgradeable.sol\";\nimport \"../../interfaces/draft-IERC1822Upgradeable.sol\";\nimport \"../../utils/AddressUpgradeable.sol\";\nimport \"../../utils/StorageSlotUpgradeable.sol\";\nimport \"../utils/Initializable.sol\";\n\n/**\n * @dev This abstract contract provides getters and event emitting update functions for\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\n *\n * _Available since v4.1._\n *\n * @custom:oz-upgrades-unsafe-allow delegatecall\n */\nabstract contract ERC1967UpgradeUpgradeable is Initializable {\n    function __ERC1967Upgrade_init() internal onlyInitializing {\n    }\n\n    function __ERC1967Upgrade_init_unchained() internal onlyInitializing {\n    }\n    // This is the keccak-256 hash of \"eip1967.proxy.rollback\" subtracted by 1\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\n\n    /**\n     * @dev Storage slot with the address of the current implementation.\n     * This is the keccak-256 hash of \"eip1967.proxy.implementation\" subtracted by 1, and is\n     * validated in the constructor.\n     */\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n\n    /**\n     * @dev Emitted when the implementation is upgraded.\n     */\n    event Upgraded(address indexed implementation);\n\n    /**\n     * @dev Returns the current implementation address.\n     */\n    function _getImplementation() internal view returns (address) {\n        return StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new address in the EIP1967 implementation slot.\n     */\n    function _setImplementation(address newImplementation) private {\n        require(AddressUpgradeable.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\n        StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n    }\n\n    /**\n     * @dev Perform implementation upgrade\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeTo(address newImplementation) internal {\n        _setImplementation(newImplementation);\n        emit Upgraded(newImplementation);\n    }\n\n    /**\n     * @dev Perform implementation upgrade with additional setup call.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeToAndCall(\n        address newImplementation,\n        bytes memory data,\n        bool forceCall\n    ) internal {\n        _upgradeTo(newImplementation);\n        if (data.length > 0 || forceCall) {\n            _functionDelegateCall(newImplementation, data);\n        }\n    }\n\n    /**\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeToAndCallUUPS(\n        address newImplementation,\n        bytes memory data,\n        bool forceCall\n    ) internal {\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\n        if (StorageSlotUpgradeable.getBooleanSlot(_ROLLBACK_SLOT).value) {\n            _setImplementation(newImplementation);\n        } else {\n            try IERC1822ProxiableUpgradeable(newImplementation).proxiableUUID() returns (bytes32 slot) {\n                require(slot == _IMPLEMENTATION_SLOT, \"ERC1967Upgrade: unsupported proxiableUUID\");\n            } catch {\n                revert(\"ERC1967Upgrade: new implementation is not UUPS\");\n            }\n            _upgradeToAndCall(newImplementation, data, forceCall);\n        }\n    }\n\n    /**\n     * @dev Storage slot with the admin of the contract.\n     * This is the keccak-256 hash of \"eip1967.proxy.admin\" subtracted by 1, and is\n     * validated in the constructor.\n     */\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\n\n    /**\n     * @dev Emitted when the admin account has changed.\n     */\n    event AdminChanged(address previousAdmin, address newAdmin);\n\n    /**\n     * @dev Returns the current admin.\n     */\n    function _getAdmin() internal view returns (address) {\n        return StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new address in the EIP1967 admin slot.\n     */\n    function _setAdmin(address newAdmin) private {\n        require(newAdmin != address(0), \"ERC1967: new admin is the zero address\");\n        StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\n    }\n\n    /**\n     * @dev Changes the admin of the proxy.\n     *\n     * Emits an {AdminChanged} event.\n     */\n    function _changeAdmin(address newAdmin) internal {\n        emit AdminChanged(_getAdmin(), newAdmin);\n        _setAdmin(newAdmin);\n    }\n\n    /**\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\n     */\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\n\n    /**\n     * @dev Emitted when the beacon is upgraded.\n     */\n    event BeaconUpgraded(address indexed beacon);\n\n    /**\n     * @dev Returns the current beacon.\n     */\n    function _getBeacon() internal view returns (address) {\n        return StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\n     */\n    function _setBeacon(address newBeacon) private {\n        require(AddressUpgradeable.isContract(newBeacon), \"ERC1967: new beacon is not a contract\");\n        require(\n            AddressUpgradeable.isContract(IBeaconUpgradeable(newBeacon).implementation()),\n            \"ERC1967: beacon implementation is not a contract\"\n        );\n        StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value = newBeacon;\n    }\n\n    /**\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\n     *\n     * Emits a {BeaconUpgraded} event.\n     */\n    function _upgradeBeaconToAndCall(\n        address newBeacon,\n        bytes memory data,\n        bool forceCall\n    ) internal {\n        _setBeacon(newBeacon);\n        emit BeaconUpgraded(newBeacon);\n        if (data.length > 0 || forceCall) {\n            _functionDelegateCall(IBeaconUpgradeable(newBeacon).implementation(), data);\n        }\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function _functionDelegateCall(address target, bytes memory data) private returns (bytes memory) {\n        require(AddressUpgradeable.isContract(target), \"Address: delegate call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return AddressUpgradeable.verifyCallResult(success, returndata, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\n */\ninterface IBeaconUpgradeable {\n    /**\n     * @dev Must return an address that can be used as a delegate call target.\n     *\n     * {BeaconProxy} will check that this address is a contract.\n     */\n    function implementation() external view returns (address);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\n * proxy whose upgrades are fully controlled by the current implementation.\n */\ninterface IERC1822ProxiableUpgradeable {\n    /**\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\n     * address.\n     *\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\n     * function revert if invoked through a proxy.\n     */\n    function proxiableUUID() external view returns (bytes32);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/StorageSlot.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for reading and writing primitive types to specific storage slots.\n *\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\n * This library helps with reading and writing to such slots without the need for inline assembly.\n *\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\n *\n * Example usage to set ERC1967 implementation slot:\n * ```\n * contract ERC1967 {\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n *\n *     function _getImplementation() internal view returns (address) {\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n *     }\n *\n *     function _setImplementation(address newImplementation) internal {\n *         require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n *     }\n * }\n * ```\n *\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\n */\nlibrary StorageSlotUpgradeable {\n    struct AddressSlot {\n        address value;\n    }\n\n    struct BooleanSlot {\n        bool value;\n    }\n\n    struct Bytes32Slot {\n        bytes32 value;\n    }\n\n    struct Uint256Slot {\n        uint256 value;\n    }\n\n    /**\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\n     */\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\n     */\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\n     */\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\n     */\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\n        assembly {\n            r.slot := slot\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/UUPSUpgradeable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../interfaces/draft-IERC1822Upgradeable.sol\";\nimport \"../ERC1967/ERC1967UpgradeUpgradeable.sol\";\nimport \"./Initializable.sol\";\n\n/**\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\n *\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\n * `UUPSUpgradeable` with a custom implementation of upgrades.\n *\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\n *\n * _Available since v4.1._\n */\nabstract contract UUPSUpgradeable is Initializable, IERC1822ProxiableUpgradeable, ERC1967UpgradeUpgradeable {\n    function __UUPSUpgradeable_init() internal onlyInitializing {\n    }\n\n    function __UUPSUpgradeable_init_unchained() internal onlyInitializing {\n    }\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\n    address private immutable __self = address(this);\n\n    /**\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\n     * fail.\n     */\n    modifier onlyProxy() {\n        require(address(this) != __self, \"Function must be called through delegatecall\");\n        require(_getImplementation() == __self, \"Function must be called through active proxy\");\n        _;\n    }\n\n    /**\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\n     * callable on the implementing contract but not through proxies.\n     */\n    modifier notDelegated() {\n        require(address(this) == __self, \"UUPSUpgradeable: must not be called through delegatecall\");\n        _;\n    }\n\n    /**\n     * @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\n     * implementation. It is used to validate that the this implementation remains valid after an upgrade.\n     *\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\n     */\n    function proxiableUUID() external view virtual override notDelegated returns (bytes32) {\n        return _IMPLEMENTATION_SLOT;\n    }\n\n    /**\n     * @dev Upgrade the implementation of the proxy to `newImplementation`.\n     *\n     * Calls {_authorizeUpgrade}.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function upgradeTo(address newImplementation) external virtual onlyProxy {\n        _authorizeUpgrade(newImplementation);\n        _upgradeToAndCallUUPS(newImplementation, new bytes(0), false);\n    }\n\n    /**\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\n     * encoded in `data`.\n     *\n     * Calls {_authorizeUpgrade}.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function upgradeToAndCall(address newImplementation, bytes memory data) external payable virtual onlyProxy {\n        _authorizeUpgrade(newImplementation);\n        _upgradeToAndCallUUPS(newImplementation, data, true);\n    }\n\n    /**\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\n     * {upgradeTo} and {upgradeToAndCall}.\n     *\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\n     *\n     * ```solidity\n     * function _authorizeUpgrade(address) internal override onlyOwner {}\n     * ```\n     */\n    function _authorizeUpgrade(address newImplementation) internal virtual;\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"
    },
    "contracts/utils/TDocDeployer.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts-upgradeable/proxy/ClonesUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\";\nimport \"../interfaces/TDocDeployerErrors.sol\";\n\n/**\n * @title TDocDeployer\n * @dev Deployer for transferable documents\n */\ncontract TDocDeployer is OwnableUpgradeable, UUPSUpgradeable, TDocDeployerErrors {\n  event Deployment(\n    address indexed deployed,\n    address indexed implementation,\n    address indexed deployer,\n    address titleEscrowFactory,\n    bytes params\n  );\n\n  event AddImplementation(address indexed implementation, address indexed titleEscrowFactory);\n\n  // mapping: implementation => title escrow factory\n  mapping(address => address) public implementations;\n\n  constructor() initializer {}\n\n  function initialize() external initializer {\n    __Ownable_init();\n  }\n\n  function _authorizeUpgrade(address) internal view override onlyOwner {}\n\n  function deploy(address implementation, bytes memory params) external returns (address) {\n    address titleEscrowFactory = implementations[implementation];\n    if (titleEscrowFactory == address(0)) {\n      revert UnsupportedImplementationContractAddress();\n    }\n\n    address deployed = ClonesUpgradeable.clone(implementation);\n    bytes memory payload = abi.encodeWithSignature(\"initialize(bytes)\", abi.encode(params, titleEscrowFactory));\n    (bool success, ) = address(deployed).call(payload);\n    if (!success) {\n      revert ImplementationInitializationFailure(payload);\n    }\n\n    emit Deployment(deployed, implementation, msg.sender, titleEscrowFactory, params);\n    return deployed;\n  }\n\n  function addImplementation(address implementation, address titleEscrowFactory) external onlyOwner {\n    if (implementations[implementation] != address(0)) {\n      revert ImplementationAlreadyAdded();\n    }\n    implementations[implementation] = titleEscrowFactory;\n\n    emit AddImplementation(implementation, titleEscrowFactory);\n  }\n\n  function removeImplementation(address implementation) external onlyOwner {\n    if (implementations[implementation] == address(0)) {\n      revert InvalidImplementation();\n    }\n    delete implementations[implementation];\n  }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/proxy/ClonesUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (proxy/Clones.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev https://eips.ethereum.org/EIPS/eip-1167[EIP 1167] is a standard for\n * deploying minimal proxy contracts, also known as \"clones\".\n *\n * > To simply and cheaply clone contract functionality in an immutable way, this standard specifies\n * > a minimal bytecode implementation that delegates all calls to a known, fixed address.\n *\n * The library includes functions to deploy a proxy using either `create` (traditional deployment) or `create2`\n * (salted deterministic deployment). It also includes functions to predict the addresses of clones deployed using the\n * deterministic method.\n *\n * _Available since v3.4._\n */\nlibrary ClonesUpgradeable {\n    /**\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\n     *\n     * This function uses the create opcode, which should never revert.\n     */\n    function clone(address implementation) internal returns (address instance) {\n        assembly {\n            let ptr := mload(0x40)\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\n            instance := create(0, ptr, 0x37)\n        }\n        require(instance != address(0), \"ERC1167: create failed\");\n    }\n\n    /**\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\n     *\n     * This function uses the create2 opcode and a `salt` to deterministically deploy\n     * the clone. Using the same `implementation` and `salt` multiple time will revert, since\n     * the clones cannot be deployed twice at the same address.\n     */\n    function cloneDeterministic(address implementation, bytes32 salt) internal returns (address instance) {\n        assembly {\n            let ptr := mload(0x40)\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\n            instance := create2(0, ptr, 0x37, salt)\n        }\n        require(instance != address(0), \"ERC1167: create2 failed\");\n    }\n\n    /**\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\n     */\n    function predictDeterministicAddress(\n        address implementation,\n        bytes32 salt,\n        address deployer\n    ) internal pure returns (address predicted) {\n        assembly {\n            let ptr := mload(0x40)\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf3ff00000000000000000000000000000000)\n            mstore(add(ptr, 0x38), shl(0x60, deployer))\n            mstore(add(ptr, 0x4c), salt)\n            mstore(add(ptr, 0x6c), keccak256(ptr, 0x37))\n            predicted := keccak256(add(ptr, 0x37), 0x55)\n        }\n    }\n\n    /**\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\n     */\n    function predictDeterministicAddress(address implementation, bytes32 salt)\n        internal\n        view\n        returns (address predicted)\n    {\n        return predictDeterministicAddress(implementation, salt, address(this));\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/ContextUpgradeable.sol\";\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    function __Ownable_init() internal onlyInitializing {\n        __Ownable_init_unchained();\n    }\n\n    function __Ownable_init_unchained() internal onlyInitializing {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"
    },
    "contracts/interfaces/TDocDeployerErrors.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\npragma solidity ^0.8.0;\n\ninterface TDocDeployerErrors {\n  error UnsupportedImplementationContractAddress();\n\n  error ImplementationInitializationFailure(bytes payload);\n\n  error ImplementationAlreadyAdded();\n\n  error InvalidImplementation();\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/cryptography/ECDSA.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../StringsUpgradeable.sol\";\n\n/**\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\n *\n * These functions can be used to verify that a message was signed by the holder\n * of the private keys of a given address.\n */\nlibrary ECDSAUpgradeable {\n    enum RecoverError {\n        NoError,\n        InvalidSignature,\n        InvalidSignatureLength,\n        InvalidSignatureS,\n        InvalidSignatureV\n    }\n\n    function _throwError(RecoverError error) private pure {\n        if (error == RecoverError.NoError) {\n            return; // no error: do nothing\n        } else if (error == RecoverError.InvalidSignature) {\n            revert(\"ECDSA: invalid signature\");\n        } else if (error == RecoverError.InvalidSignatureLength) {\n            revert(\"ECDSA: invalid signature length\");\n        } else if (error == RecoverError.InvalidSignatureS) {\n            revert(\"ECDSA: invalid signature 's' value\");\n        } else if (error == RecoverError.InvalidSignatureV) {\n            revert(\"ECDSA: invalid signature 'v' value\");\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature` or error string. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     *\n     * Documentation for signature generation:\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\n        // Check the signature length\n        // - case 65: r,s,v signature (standard)\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\n        if (signature.length == 65) {\n            bytes32 r;\n            bytes32 s;\n            uint8 v;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            assembly {\n                r := mload(add(signature, 0x20))\n                s := mload(add(signature, 0x40))\n                v := byte(0, mload(add(signature, 0x60)))\n            }\n            return tryRecover(hash, v, r, s);\n        } else if (signature.length == 64) {\n            bytes32 r;\n            bytes32 vs;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            assembly {\n                r := mload(add(signature, 0x20))\n                vs := mload(add(signature, 0x40))\n            }\n            return tryRecover(hash, r, vs);\n        } else {\n            return (address(0), RecoverError.InvalidSignatureLength);\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature`. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     */\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n     *\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address, RecoverError) {\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\n        return tryRecover(hash, v, r, s);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\n     *\n     * _Available since v4.2._\n     */\n    function recover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address, RecoverError) {\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n        // the valid range for s in (301): 0 < s < secp256k1n ÷ 2 + 1, and for v in (302): v ∈ {27, 28}. Most\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n        //\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n        // these malleable signatures as well.\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\n            return (address(0), RecoverError.InvalidSignatureS);\n        }\n        if (v != 27 && v != 28) {\n            return (address(0), RecoverError.InvalidSignatureV);\n        }\n\n        // If the signature is valid (and not malleable), return the signer address\n        address signer = ecrecover(hash, v, r, s);\n        if (signer == address(0)) {\n            return (address(0), RecoverError.InvalidSignature);\n        }\n\n        return (signer, RecoverError.NoError);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function recover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\n        // 32 is the length in bytes of hash,\n        // enforced by the type signature above\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n\", StringsUpgradeable.toString(s.length), s));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Typed Data, created from a\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\n     * to the one signed with the\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\n     * JSON-RPC method as part of EIP-712.\n     *\n     * See {recover}.\n     */\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19\\x01\", domainSeparator, structHash));\n    }\n}\n"
    },
    "contracts/utils/SigHelper.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol\";\nimport \"../interfaces/SigHelperErrors.sol\";\n\nabstract contract SigHelper is SigHelperErrors {\n  using ECDSAUpgradeable for bytes32;\n\n  bytes32 public DOMAIN_SEPARATOR;\n  mapping(address => uint256) public nonces;\n  mapping(bytes32 => bool) public cancelled;\n\n  struct Sig {\n    bytes32 r;\n    bytes32 s;\n    uint8 v;\n  }\n\n  function __SigHelper_init(string memory name, string memory version) internal {\n    DOMAIN_SEPARATOR = keccak256(\n      abi.encode(\n        keccak256(\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\"),\n        keccak256(bytes(name)),\n        keccak256(bytes(version)),\n        block.chainid,\n        address(this)\n      )\n    );\n  }\n\n  function _validateSig(\n    bytes32 hash,\n    address signer,\n    Sig memory sig\n  ) internal view virtual returns (bool) {\n    if (cancelled[hash]) {\n      revert SignatureAlreadyCancelled();\n    }\n    bytes32 digest = DOMAIN_SEPARATOR.toTypedDataHash(hash);\n    address rSigner = digest.recover(abi.encodePacked(sig.r, sig.s, sig.v));\n    return rSigner != address(0) && rSigner == signer;\n  }\n\n  function _cancelHash(bytes32 hash) internal virtual {\n    if (cancelled[hash]) {\n      revert SignatureAlreadyCancelled();\n    }\n    cancelled[hash] = true;\n  }\n}\n"
    },
    "contracts/interfaces/SigHelperErrors.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\npragma solidity ^0.8.0;\n\ninterface SigHelperErrors {\n  error SignatureAlreadyCancelled();\n}\n"
    },
    "contracts/presets/TitleEscrowSignable.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\npragma solidity ^0.8.0;\n\nimport \"../TitleEscrow.sol\";\nimport \"../utils/SigHelper.sol\";\nimport { BeneficiaryTransferEndorsement } from \"../lib/TitleEscrowStructs.sol\";\nimport \"../interfaces/ITitleEscrowSignable.sol\";\nimport \"../interfaces/TitleEscrowSignableErrors.sol\";\n\n/**\n * @title TitleEscrowSignable\n * @dev This Title Escrow allows the holder to perform an off-chain endorsement of beneficiary transfers\n * @custom:experimental Note that this is currently an experimental feature. See readme for usage details.\n */\ncontract TitleEscrowSignable is SigHelper, TitleEscrow, TitleEscrowSignableErrors, ITitleEscrowSignable {\n  string public constant name = \"TradeTrust Title Escrow\";\n\n  // BeneficiaryTransfer(address beneficiary,address holder,address nominee,address registry,uint256 tokenId,uint256 deadline,uint256 nonce)\n  bytes32 public constant BENEFICIARY_TRANSFER_TYPEHASH =\n    0xdc8ea80c045a9b675c73cb328c225cc3f099d01bd9b7820947ac10cba8661cf1;\n\n  function initialize(address _registry, uint256 _tokenId) public virtual override initializer {\n    __TitleEscrowSignable_init(_registry, _tokenId);\n  }\n\n  function __TitleEscrowSignable_init(address _registry, uint256 _tokenId) internal virtual onlyInitializing {\n    super.__TitleEscrow_init(_registry, _tokenId);\n    __SigHelper_init(name, \"1\");\n  }\n\n  function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n    return super.supportsInterface(interfaceId) || interfaceId == type(ITitleEscrowSignable).interfaceId;\n  }\n\n  /**\n   * @dev See {ITitleEscrowSignable-transferBeneficiaryWithSig}.\n   */\n  function transferBeneficiaryWithSig(\n    BeneficiaryTransferEndorsement memory endorsement,\n    Sig memory sig\n  ) public virtual override whenNotPaused whenActive onlyBeneficiary whenHoldingToken {\n    if (endorsement.deadline < block.timestamp) {\n      revert SignatureExpired(block.timestamp);\n    }\n    if (\n      endorsement.nominee == address(0) ||\n      endorsement.nominee == beneficiary ||\n      endorsement.holder != holder ||\n      endorsement.tokenId != tokenId ||\n      endorsement.registry != registry\n    ) {\n      revert InvalidEndorsement();\n    }\n\n    if (nominee != address(0)) {\n      if (endorsement.nominee != nominee) {\n        revert MismatchedEndorsedNomineeAndOnChainNominee(endorsement.nominee, nominee);\n      }\n    }\n\n    if (endorsement.beneficiary != beneficiary) {\n      revert MismatchedEndorsedBeneficiaryAndCurrentBeneficiary(endorsement.beneficiary, beneficiary);\n    }\n    if (!_validateSig(_hash(endorsement), holder, sig)) {\n      revert InvalidSignature();\n    }\n\n    ++nonces[holder];\n    _setBeneficiary(endorsement.nominee, \"0x0\");\n  }\n\n  /**\n   * @dev See {ITitleEscrowSignable-cancelBeneficiaryTransfer}.\n   */\n  function cancelBeneficiaryTransfer(\n    BeneficiaryTransferEndorsement memory endorsement\n  ) public virtual override whenNotPaused whenActive {\n    if (msg.sender != endorsement.holder) {\n      revert CallerNotEndorser();\n    }\n\n    bytes32 hash = _hash(endorsement);\n    _cancelHash(hash);\n\n    emit CancelBeneficiaryTransferEndorsement(hash, endorsement.holder, endorsement.tokenId);\n  }\n\n  function _hash(BeneficiaryTransferEndorsement memory endorsement) internal view returns (bytes32) {\n    return\n      keccak256(\n        abi.encode(\n          BENEFICIARY_TRANSFER_TYPEHASH,\n          endorsement.beneficiary,\n          endorsement.holder,\n          endorsement.nominee,\n          endorsement.registry,\n          endorsement.tokenId,\n          endorsement.deadline,\n          nonces[endorsement.holder]\n        )\n      );\n  }\n\n  function _setHolder(address newHolder, bytes memory _remark) internal virtual override {\n    ++nonces[holder];\n    super._setHolder(newHolder, _remark);\n  }\n}\n"
    },
    "contracts/lib/TitleEscrowStructs.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\npragma solidity ^0.8.0;\n\n/**\n  @dev BeneficiaryTransferEndorsement represents the endorsement details.\n       The beneficiary is the transfer proposer, holder is the endorser, nominee is the endorsed nominee, registry is\n       the token registry, tokenId is the token id, deadline is the expiry in seconds and nonce is the holder's nonce.\n*/\nstruct BeneficiaryTransferEndorsement {\n  address beneficiary;\n  address holder;\n  address nominee;\n  address registry;\n  uint256 tokenId;\n  uint256 deadline;\n  uint256 nonce;\n}\n"
    },
    "contracts/interfaces/ITitleEscrowSignable.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\";\nimport \"../utils/SigHelper.sol\";\nimport \"./ITitleEscrow.sol\";\nimport { BeneficiaryTransferEndorsement } from \"../lib/TitleEscrowStructs.sol\";\n\ninterface ITitleEscrowSignable is ITitleEscrow {\n  event CancelBeneficiaryTransferEndorsement(bytes32 indexed hash, address indexed endorser, uint256 indexed tokenId);\n\n  /**\n   * @notice Transfer the beneficiary with a signature.\n   * @param endorsement The endorsement to transfer the beneficiary.\n   * @param sig The signature of the endorsement.\n   */\n  function transferBeneficiaryWithSig(BeneficiaryTransferEndorsement memory endorsement, SigHelper.Sig memory sig)\n    external;\n\n  /**\n   * @notice Cancel a beneficiary transfer.\n   * @param endorsement The endorsement to cancel the beneficiary transfer.\n   */\n  function cancelBeneficiaryTransfer(BeneficiaryTransferEndorsement memory endorsement) external;\n}\n"
    },
    "contracts/interfaces/TitleEscrowSignableErrors.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\npragma solidity ^0.8.0;\n\ninterface TitleEscrowSignableErrors {\n  error SignatureExpired(uint256 currentTimestamp);\n\n  error InvalidSignature();\n\n  error InvalidEndorsement();\n\n  error MismatchedEndorsedNomineeAndOnChainNominee(address endorsedNominee, address onChainNominee);\n\n  error MismatchedEndorsedBeneficiaryAndCurrentBeneficiary(address endorsedBeneficiary, address currentBeneficiary);\n\n  error CallerNotEndorser();\n}\n"
    },
    "contracts/mocks/ERC721ReceiverMock.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\";\n\ncontract ERC721ReceiverMock is IERC721Receiver {\n  enum Error {\n    None,\n    RevertWithMessage,\n    RevertWithoutMessage,\n    Panic,\n    ReturnsUnexpectedValue\n  }\n  event TokenReceived(\n    address indexed beneficiary,\n    address indexed holder,\n    bool indexed isMinting,\n    address registry,\n    uint256 tokenId,\n    bytes remark\n  );\n\n  Error private _error;\n\n  function setErrorType(Error error) external {\n    _error = error;\n  }\n\n  function onERC721Received(\n    address /* operator */,\n    address /* from */,\n    uint256 tokenId /* tokenId */,\n    bytes memory data /* data */\n  ) public override returns (bytes4) {\n    if (_error == Error.RevertWithMessage) {\n      revert(\"ERC721ReceiverMock: reverting\");\n    } else if (_error == Error.RevertWithoutMessage) {\n      revert();\n    } else if (_error == Error.Panic) {\n      uint256 a = uint256(0) / uint256(0);\n      a;\n    } else if (_error == Error.ReturnsUnexpectedValue) {\n      return bytes4(0x12345678);\n    }\n    (address _beneficiary, address _holder, bytes memory _remark) = abi.decode(data, (address, address, bytes));\n    emit TokenReceived(_beneficiary, _holder, true, msg.sender, tokenId, _remark);\n    return IERC721Receiver.onERC721Received.selector;\n  }\n}\n"
    },
    "contracts/mocks/SigHelperMock.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\npragma solidity ^0.8.0;\n\nimport \"../utils/SigHelper.sol\";\n\ncontract SigHelperMock is SigHelper {\n  constructor(string memory name) {\n    __SigHelper_init(name, \"1\");\n  }\n\n  function __SigHelper_initInternal(string memory name, string memory version) public {\n    super.__SigHelper_init(name, version);\n  }\n\n  function validateSigInternal(\n    bytes32 hash,\n    address signer,\n    Sig memory sig\n  ) public view returns (bool) {\n    return super._validateSig(hash, signer, sig);\n  }\n\n  function cancelHashInternal(bytes32 hash) public {\n    super._cancelHash(hash);\n  }\n}\n"
    },
    "contracts/mocks/TitleEscrowMock.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\npragma solidity ^0.8.0;\n\nimport \"../TitleEscrow.sol\";\n\ncontract TitleEscrowMock is TitleEscrow {\n  constructor() TitleEscrow() {}\n\n  function setActive(bool val) public {\n    active = val;\n  }\n\n  // function to initialize the mock which also sets the beneficiary, holder and nominee\n  function initializeMock(\n    address _registry,\n    uint256 _tokenId,\n    address _beneficiary,\n    address _holder,\n    address _nominee\n  ) public {\n    registry = _registry;\n    tokenId = _tokenId;\n    beneficiary = _beneficiary;\n    holder = _holder;\n    nominee = _nominee;\n    active = true;\n  }\n}\n"
    },
    "contracts/base/TradeTrustTokenMintable.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\npragma solidity ^0.8.0;\n\nimport \"./TradeTrustSBT.sol\";\nimport \"./RegistryAccess.sol\";\nimport \"../interfaces/ITradeTrustTokenMintable.sol\";\n\n/**\n * @title TradeTrustTokenMintable\n * @dev This contract defines the mint functionality for the TradeTrustToken.\n */\nabstract contract TradeTrustTokenMintable is TradeTrustSBT, RegistryAccess, ITradeTrustTokenMintable {\n  /**\n   * @dev See {ERC165Upgradeable-supportsInterface}.\n   */\n  function supportsInterface(\n    bytes4 interfaceId\n  ) public view virtual override(TradeTrustSBT, RegistryAccess) returns (bool) {\n    return interfaceId == type(ITradeTrustTokenMintable).interfaceId || super.supportsInterface(interfaceId);\n  }\n\n  /**\n   * @dev See {ITradeTrustTokenMintable-mint}.\n   */\n  function mint(\n    address beneficiary,\n    address holder,\n    uint256 tokenId,\n    bytes calldata _remark\n  ) external virtual override whenNotPaused onlyRole(MINTER_ROLE) returns (address) {\n    return _mintTitle(beneficiary, holder, tokenId, _remark);\n  }\n\n  /**\n   * @dev Internal function to mint a TradeTrust token.\n   * @param beneficiary The beneficiary of the token.\n   * @param holder The holder of the token.\n   * @param tokenId The ID of the token to mint.\n   * @return The address of the corresponding TitleEscrow.\n   */\n  function _mintTitle(\n    address beneficiary,\n    address holder,\n    uint256 tokenId,\n    bytes calldata _remark\n  ) internal virtual remarkLengthLimit(_remark) returns (address) {\n    if (_exists(tokenId)) {\n      revert TokenExists();\n    }\n\n    address newTitleEscrow = titleEscrowFactory().create(tokenId);\n    _safeMint(newTitleEscrow, tokenId, abi.encode(beneficiary, holder, _remark));\n\n    return newTitleEscrow;\n  }\n}\n"
    },
    "contracts/base/TradeTrustTokenBase.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\npragma solidity ^0.8.0;\n\nimport \"./RegistryAccess.sol\";\nimport \"./TradeTrustTokenBurnable.sol\";\nimport \"./TradeTrustTokenMintable.sol\";\nimport \"./TradeTrustTokenRestorable.sol\";\nimport \"../interfaces/ITradeTrustToken.sol\";\nimport \"./TradeTrustTokenBaseURI.sol\";\n\n/**\n * @title TradeTrustTokenBase\n * @dev Base token contract for TradeTrust tokens.\n */\nabstract contract TradeTrustTokenBase is\n  TradeTrustSBT,\n  RegistryAccess,\n  TradeTrustTokenBaseURI,\n  TradeTrustTokenBurnable,\n  TradeTrustTokenMintable,\n  TradeTrustTokenRestorable\n{\n  /**\n   * @dev Initializss the contract by setting a `name` and a `symbol` to the token contract.\n   * @param name The name of the token contract.\n   * @param symbol The symbol of the token contract.\n   */\n  function __TradeTrustTokenBase_init(\n    string memory name,\n    string memory symbol,\n    address admin\n  ) internal onlyInitializing {\n    __TradeTrustSBT_init(name, symbol);\n    __RegistryAccess_init(admin);\n  }\n\n  /**\n   * @dev See {ERC165Upgradeable-supportsInterface}.\n   */\n  function supportsInterface(\n    bytes4 interfaceId\n  )\n    public\n    view\n    virtual\n    override(\n      TradeTrustSBT,\n      RegistryAccess,\n      TradeTrustTokenBaseURI,\n      TradeTrustTokenRestorable,\n      TradeTrustTokenMintable,\n      TradeTrustTokenBurnable\n    )\n    returns (bool)\n  {\n    return interfaceId == type(ITradeTrustToken).interfaceId || super.supportsInterface(interfaceId);\n  }\n\n  /**\n   * @dev Pauses all token transfers.\n   * @notice Requires the caller to be admin.\n   */\n  function pause(bytes calldata _remark) external onlyRole(DEFAULT_ADMIN_ROLE) remarkLengthLimit(_remark) {\n    _pause();\n    remark = _remark;\n    emit PauseWithRemark(msg.sender, _remark);\n  }\n\n  /**\n   * @dev Unpauses all token transfers.\n   * @notice Requires the caller to be admin.\n   */\n  function unpause(bytes calldata _remark) external onlyRole(DEFAULT_ADMIN_ROLE) remarkLengthLimit(_remark) {\n    _unpause();\n    remark = _remark;\n    emit UnpauseWithRemark(msg.sender, _remark);\n  }\n\n  /**\n   * @dev See {SBTUpgradeable-_beforeTokenTransfer}.\n   */\n  function _beforeTokenTransfer(\n    address from,\n    address to,\n    uint256 tokenId\n  ) internal virtual override(TradeTrustSBT, TradeTrustTokenBurnable) whenNotPaused {\n    super._beforeTokenTransfer(from, to, tokenId);\n\n    address titleEscrow = titleEscrowFactory().getAddress(address(this), tokenId);\n    if (to != address(this) && to != titleEscrow && to != BURN_ADDRESS) {\n      revert TransferFailure();\n    }\n  }\n\n  /**\n   * @dev See {TradeTrustTokenBaseURI-_baseURI}.\n   */\n  function _baseURI() internal view virtual override(SBTUpgradeable, TradeTrustTokenBaseURI) returns (string memory) {\n    return super._baseURI();\n  }\n}\n"
    },
    "contracts/base/TradeTrustTokenBurnable.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\npragma solidity ^0.8.0;\n\nimport \"./TradeTrustSBT.sol\";\nimport \"./RegistryAccess.sol\";\nimport \"../interfaces/ITradeTrustTokenBurnable.sol\";\n\n/**\n * @title TradeTrustTokenBurnable\n * @dev This contract defines the burn functionality for the TradeTrustToken.\n */\nabstract contract TradeTrustTokenBurnable is TradeTrustSBT, RegistryAccess, ITradeTrustTokenBurnable {\n  /**\n   * @dev Internal constant for the burn address.\n   */\n  address internal constant BURN_ADDRESS = 0x000000000000000000000000000000000000dEaD;\n\n  /**\n   * @dev See {ERC165Upgradeable-supportsInterface}.\n   */\n  function supportsInterface(\n    bytes4 interfaceId\n  ) public view virtual override(TradeTrustSBT, RegistryAccess) returns (bool) {\n    return interfaceId == type(ITradeTrustTokenBurnable).interfaceId || super.supportsInterface(interfaceId);\n  }\n\n  /**\n   * @dev See {ITradeTrustTokenBurnable-burn}.\n   */\n  function burn(\n    uint256 tokenId,\n    bytes calldata _remark\n  ) external virtual override whenNotPaused onlyRole(ACCEPTER_ROLE) remarkLengthLimit(_remark) {\n    _burnTitle(tokenId, _remark);\n  }\n\n  /**\n   * @dev Internal function to burn a token.\n   * @param tokenId The ID of the token to burn.\n   */\n  function _burnTitle(uint256 tokenId, bytes calldata _remark) internal virtual {\n    address titleEscrow = titleEscrowFactory().getAddress(address(this), tokenId);\n    ITitleEscrow(titleEscrow).shred(_remark);\n\n    // Burning token to 0xdead instead to show a differentiate state as address(0) is used for unminted tokens\n    _registryTransferTo(BURN_ADDRESS, tokenId, \"\");\n  }\n\n  /**\n   * @dev See {SBTUpgradeable-_beforeTokenTransfer}.\n   */\n  function _beforeTokenTransfer(address from, address to, uint256 tokenId) internal virtual override {\n    if (to == BURN_ADDRESS && ownerOf(tokenId) != address(this)) {\n      revert TokenNotSurrendered();\n    }\n    super._beforeTokenTransfer(from, to, tokenId);\n  }\n}\n"
    },
    "contracts/presets/TradeTrustTokenStandard.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\npragma solidity ^0.8.0;\n\nimport \"../base/TradeTrustTokenBase.sol\";\n\n/**\n * @title TradeTrustTokenStandard\n */\ncontract TradeTrustTokenStandard is TradeTrustTokenBase {\n  address internal _titleEscrowFactory;\n  uint256 internal _genesis;\n\n  constructor() initializer {}\n\n  /**\n   * @dev Initialize the contract.\n   * @param params The initialisation parameters.\n   */\n  function initialize(bytes memory params) external initializer {\n    (bytes memory _params, address titleEscrowFactory_) = abi.decode(params, (bytes, address));\n    (string memory name, string memory symbol, address admin) = abi.decode(_params, (string, string, address));\n    _genesis = block.number;\n    _titleEscrowFactory = titleEscrowFactory_;\n    __TradeTrustTokenBase_init(name, symbol, admin);\n  }\n\n  /**\n   * @dev See {ITradeTrustSBT-titleEscrowFactory}.\n   */\n  function titleEscrowFactory() public view override returns (ITitleEscrowFactory) {\n    return ITitleEscrowFactory(_titleEscrowFactory);\n  }\n\n  /**\n   * @dev See {ITradeTrustSBT-genesis}.\n   */\n  function genesis() public view override returns (uint256) {\n    return _genesis;\n  }\n}\n"
    },
    "contracts/TradeTrustToken.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\npragma solidity ^0.8.0;\n\nimport \"./base/TradeTrustTokenBase.sol\";\n\n/**\n * @title TradeTrustToken\n */\ncontract TradeTrustToken is TradeTrustTokenBase {\n  address internal immutable _titleEscrowFactory;\n  uint256 internal immutable _genesis;\n  /**\n   * @notice Creates a new TradeTrustToken contract.\n   * @param name The name of the token.\n   * @param symbol The symbol of the token.\n   * @param titleEscrowFactory_ The address of the TitleEscrowFactory contract.\n   */\n  constructor(string memory name, string memory symbol, address titleEscrowFactory_) {\n    _genesis = block.number;\n    _titleEscrowFactory = titleEscrowFactory_;\n    initialize(name, symbol, _msgSender());\n  }\n\n  /**\n   * @notice Initializes the TradeTrustToken with the provided name, symbol, and admin address.\n   * @param name The name of the token.\n   * @param symbol The symbol of the token.\n   * @param admin The address of the admin.\n   */\n  function initialize(string memory name, string memory symbol, address admin) internal initializer {\n    __TradeTrustTokenBase_init(name, symbol, admin);\n  }\n\n  /**\n   * @dev See {ITradeTrustSBT-titleEscrowFactory}.\n   */\n  function titleEscrowFactory() public view override returns (ITitleEscrowFactory) {\n    return ITitleEscrowFactory(_titleEscrowFactory);\n  }\n\n  /**\n   * @dev See {ITradeTrustSBT-genesis}.\n   */\n  function genesis() public view override returns (uint256) {\n    return _genesis;\n  }\n}\n"
    },
    "contracts/mocks/TradeTrustTokenMock.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\npragma solidity ^0.8.0;\n\nimport \"../TradeTrustToken.sol\";\n\ncontract TradeTrustTokenMock is TradeTrustToken {\n  constructor(\n    string memory name,\n    string memory symbol,\n    address escrowFactory\n  ) TradeTrustToken(name, symbol, escrowFactory) {}\n\n  function mintInternal(address to, uint256 tokenId) public virtual onlyRole(MINTER_ROLE) returns (bool) {\n    _safeMint(to, tokenId);\n    return true;\n  }\n\n  function burnInternal(uint256 tokenId) public virtual {\n    _burn(tokenId);\n  }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": ["storageLayout", "abi", "evm.bytecode", "evm.deployedBytecode", "evm.methodIdentifiers", "metadata"],
        "": ["ast"]
      }
    }
  }
}
